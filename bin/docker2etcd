#!/usr/bin/env ruby

require 'small-setup'

OptionParser.new do |opts|
  opts.banner = "Usage: command [options]"
  opts.on("-h", "--host host", "Set host IP/domain") do |h|
      @options[:host] = h
  end
  opts.on("-e", "--etcd host:port", "Set etcd host and port") do |e|
      @options[:etcd] = e
  end
  opts.on("-u","--url","Make container url as host/name instead of host:port") do |u|
      @options[:url]=u
  end
  opts.on("-v","--verbose","verboser") do |v|
      @options[:verbose]=v
  end
  opts.on("-c","--clear","clear etcd of previous data (only containers data)") do |c|
      @options[:clear]=c
  end
  opts.on("-f","--foreground","Keep running on foregroud. Default is run once and exit.") do |f|
    @options[:foreground]=f
  end
end.parse!

run  = true
last = []

while run do

  containers = `docker ps | tail -n+2 | awk '{ print $1 }'`.split("\n")

  if last != containers then

    if @options[:clear] then
      data = nodes2obj( http_get("#{@options[:etcd]}/v2/keys/?recursive=true")["node"]["nodes"] ,"/")
      data.keys.each {|k|
        n = data[k]
        if n.has_key?("host") && n.has_key?("name") && n.has_key?("port") then
            puts "delete #{n["name"]}"
            http_delete("#{@options[:etcd]}/v2/keys/#{n["name"]}?dir=true&recursive=true")
        end
      }
    end

    containers
        .map  { |id| `docker inspect #{id}` }
        .map  { |inspect| JSON.parse(inspect)[0]}
        .map  { |data| flatten(data,data["Name"]) }
        .each { |container| 
            name = container.keys.first.split("/")[1]
            hport = container.select {|k,v| k.match(/hostport$/) }.first[1]
            container["/#{name}/name"] = name
            container["/#{name}/port"] = hport
            container["/#{name}/host"] = @options[:host]
            if @options[:url] then
                container["/#{name}/url"] = "http://#{@options[:host]}/#{name}"
            else
                container["/#{name}/url"] = "http://#{@options[:host]}:#{hport}"
            end
            container.keys.each {|key|
                if container[key] != nil then
                    if @options[:verbose] then
                        puts "#{key} = #{container[key]}"
                    end
                    http_put("#{@options[:etcd]}/v2/keys#{key}","value=#{URI.encode(container[key])}")
                end
            }
            puts "-> #{name} : #{container["/#{name}/url"]}"
        }
      last = containers
  end

  run =false

  if @options[:foreground] then
    run = true
    sleep 5
  end

end

