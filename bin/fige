#!/usr/bin/env ruby

require 'small-setup'
require 'yaml'

OptionParser.new do |opts|
  opts.banner = "Usage: command [options]"
  opts.on("-h", "--host host", "Set host IP/domain") do |h|
      @options[:host] = h
  end
  opts.on("-e", "--etcd host:port", "Set etcd host and port") do |e|
      @options[:etcd] = e
  end
  opts.on("-u","--url","Make container url as host/name instead of host:port") do |u|
      @options[:url]=u
  end
  opts.on("-v","--verbose","verboser") do |v|
      @options[:verbose]=v
  end
  opts.on("-c","--command cmd","A command to execute after each run") do |c|
    @options[:cmd]=c
  end
  opts.on("-f","--foreground","Keep running on foregroud. Default is run once and exit.") do |f|
    @options[:foreground]=f
  end
  opts.on("-t","--target name","Target a single container") do |t|
    @options[:target]=t
  end
  opts.on("-i","--input file","Input file") do |i|
    @options[:input]=i
  end
  opts.on("-u","--update","pull container") do |p|
    @options[:update]=p
  end
end.parse!

file = @options[:input] || 'fig.yml'
yml = YAML.load_file(file)

env = {
  'HOST'=>@options[:host],
  'ETCD'=>@options[:etcd]
}

@options[:containers]=[]

apps=[]
if @options[:target] then
  apps=yml.keys.select {|k| k == @options[:target]}
else
    apps=yml.keys
end

apps.each {|k|

  if !yml[k].has_key? "name" then
    yml[k]['name'] = yml[k]['image'].gsub(/[^\/]+\//,'')
  end

  puts `docker stop #{yml[k]['name']} 2> /dev/null`
  puts `docker rm #{yml[k]['name']} 2> /dev/null`

  if !yml[k].has_key? "environment" then
    yml[k]['environment'] = {}
  end

  env.keys.each{ |ke|
    yml[k]['environment'][ke] = env[ke]
  }

  cmd = "docker run -d "
  cmd << " --name #{yml[k]['name']} "

  if yml[k].has_key? "ports" then
    yml[k]['ports'].each {|p|
      cmd << " -p #{p} "
    }
  end

  if yml[k].has_key? "links" then
    yml[k]['links'].each {|l|
      cmd << " --link #{l} "
    }
  end

  if yml[k].has_key? "volumes" then
    yml[k]['volumes'].each {|v|
      cmd << " -v #{v} "
    }
  end

  if yml[k].has_key? "environment" then
    yml[k]['environment'].keys.each {|ke|
      cmd << " -e \"#{ke}=#{yml[k]['environment'][ke].gsub('"','\"')}\" "
    }
  end

  cmd << " -t #{yml[k]['image']} "

  if yml[k].has_key? "command" then
    cmd << " #{yml[k]["command"]}  "
  end

  if @options[:update] then
    `docker pull #{yml[k]['image']} > /dev/null 2>&1`
  end

  cid = `#{cmd}`
  @options[:containers].push(cid)
  puts "#{yml[k]['name']} = #{cid}"

  if @options[:cmd] then
      puts `#{@options[:cmd]}`
  end

}

puts `docker ps`

if @options[:foreground] then
  def stop()
    puts "Stopping..."
    @options[:containers].each {|cid|
      puts `docker stop #{cid}`
      puts `docker rm #{cid}`
    }
    exit
  end
  trap('SIGINT') do stop() end
  trap('SIGTERM') do stop() end
  while true do
    sleep 5
  end
end

